}
if(!is.null(HRU_thrs)){
hru_analysis$result_all$Threshold[
hru_analysis$result_all$n_HRU > HRU_thrs] <- "above"
}
if(any(hru_analysis$result_all$Threshold == "above")){
hru_analysis$result_all$Legend <- paste(
hru_analysis$result_all$Pareto_front,
hru_analysis$result_all$Threshold, sep = ", ") %>%
ordered(., levels = c("dominated, below",
"non dominated, below",
"dominated, above",
"non dominated, above"))
} else {
hru_analysis$result_all$Legend <-
hru_analysis$result_all$Pareto_front %>%
ordered(., levels = c("dominated", "non dominated"))
}
pareto_ggplot <- ggplot() +
geom_line(data = hru_analysis$result_nondominated,
aes(x = n_HRU, y = aREA), col = "tomato3",
lwd = 0.3, alpha = 0.5) +
geom_point(data = hru_analysis$result_all,
aes(x = n_HRU, y = aREA, col = Legend),
size = 0.7) +
theme_bw()
if(any(hru_analysis$result_all$Threshold == "above")){
pareto_ggplot <- pareto_ggplot +
scale_color_manual(values = c("grey65","tomato3", "grey90", "tomato1"), drop = FALSE)
} else {
pareto_ggplot <- pareto_ggplot +
scale_color_manual(values = c("grey65", "tomato3"), drop = FALSE)
}
if(!is.null(HRU_thrs)){
pareto_ggplot <- pareto_ggplot +
geom_vline(aes(xintercept = HRU_thrs), linetype ="dashed", size = 0.3)
}
if(!is.null(aREA_thrs)){
pareto_ggplot <- pareto_ggplot +
geom_hline(aes(yintercept = aREA_thrs), linetype ="dashed", size = 0.3)
}
pareto_plotly <- plotly_build(pareto_ggplot)
legend_lbl <- c("dominated, above", "non dominated, above",
"dominated, below", "non dominated, below",
"dominated", "non dominated")
for (i in 1:length(pareto_plotly$x$data)){
plotly_lbl <- pareto_plotly$x$data[[i]]$text[1] %>%
strsplit("<br>|:") %>%
unlist %>%
gsub("^\\s+|\\s+$", "", .)
legend_filt <- legend_lbl[legend_lbl %in% plotly_lbl]
if(length(legend_filt) > 0){
thrs_comb_txt <- hru_analysis$result_all %>%
filter(Legend == legend_filt) %>%
.$thrs_comb
label_txt <- pareto_plotly$x$data[[i]]$text
for (rmv in legend_lbl){
label_txt <- sub(paste0("<br>Legend: ", rmv),"",label_txt)
}
label_txt <- paste0("thrs_comb: ",thrs_comb_txt, "<br>", label_txt)
pareto_plotly$x$data[[i]]$text <- label_txt
}
rm(legend_filt)
}
pareto_plotly
hru_analysis <- topHRU(hru_table, luse_thrs = c(0, 300, 10), soil_thrs = c(0, 240, 8),
slp_thrs = c(0, 400, 20), thrs_type = c("A"), weight = c(1, 1, 1))
hru_analysis <- topHRU(hru_table, luse_thrs = c(0, 300, 5), soil_thrs = c(0, 240, 4),
slp_thrs = c(0, 400, 20), thrs_type = c("A"), weight = c(1, 1, 1))
hru_analysis$result_all$Threshold <-
factor(rep(2, nrow(hru_analysis$result_all)),
levels = 1:2, labels = c("above", "below"))
if(!is.null(aREA_thrs)){
hru_analysis$result_all$Threshold[
hru_analysis$result_all$aREA > aREA_thrs] <- "above"
}
if(!is.null(HRU_thrs)){
hru_analysis$result_all$Threshold[
hru_analysis$result_all$n_HRU > HRU_thrs] <- "above"
}
if(any(hru_analysis$result_all$Threshold == "above")){
hru_analysis$result_all$Legend <- paste(
hru_analysis$result_all$Pareto_front,
hru_analysis$result_all$Threshold, sep = ", ") %>%
ordered(., levels = c("dominated, below",
"non dominated, below",
"dominated, above",
"non dominated, above"))
} else {
hru_analysis$result_all$Legend <-
hru_analysis$result_all$Pareto_front %>%
ordered(., levels = c("dominated", "non dominated"))
}
pareto_ggplot <- ggplot() +
geom_line(data = hru_analysis$result_nondominated,
aes(x = n_HRU, y = aREA), col = "tomato3",
lwd = 0.3, alpha = 0.5) +
geom_point(data = hru_analysis$result_all,
aes(x = n_HRU, y = aREA, col = Legend),
size = 0.7) +
theme_bw()
if(any(hru_analysis$result_all$Threshold == "above")){
pareto_ggplot <- pareto_ggplot +
scale_color_manual(values = c("grey65","tomato3", "grey90", "tomato1"), drop = FALSE)
} else {
pareto_ggplot <- pareto_ggplot +
scale_color_manual(values = c("grey65", "tomato3"), drop = FALSE)
}
if(!is.null(HRU_thrs)){
pareto_ggplot <- pareto_ggplot +
geom_vline(aes(xintercept = HRU_thrs), linetype ="dashed", size = 0.3)
}
if(!is.null(aREA_thrs)){
pareto_ggplot <- pareto_ggplot +
geom_hline(aes(yintercept = aREA_thrs), linetype ="dashed", size = 0.3)
}
pareto_plotly <- plotly_build(pareto_ggplot)
legend_lbl <- c("dominated, above", "non dominated, above",
"dominated, below", "non dominated, below",
"dominated", "non dominated")
for (i in 1:length(pareto_plotly$x$data)){
plotly_lbl <- pareto_plotly$x$data[[i]]$text[1] %>%
strsplit("<br>|:") %>%
unlist %>%
gsub("^\\s+|\\s+$", "", .)
legend_filt <- legend_lbl[legend_lbl %in% plotly_lbl]
if(length(legend_filt) > 0){
thrs_comb_txt <- hru_analysis$result_all %>%
filter(Legend == legend_filt) %>%
.$thrs_comb
label_txt <- pareto_plotly$x$data[[i]]$text
for (rmv in legend_lbl){
label_txt <- sub(paste0("<br>Legend: ", rmv),"",label_txt)
}
label_txt <- paste0("thrs_comb: ",thrs_comb_txt, "<br>", label_txt)
pareto_plotly$x$data[[i]]$text <- label_txt
}
rm(legend_filt)
}
pareto_plotly
plot_pareto(hru_analysis = hru_analysis, aREA_thrs = 0.1, HRU_thrs = 2000)
hru_analysis <- topHRU(hru_table, luse_thrs = c(0, 180, 2), soil_thrs = c(0, 240, 3),
slp_thrs = c(0, 0, 0), thrs_type = c("A"), weight = c(1, 1, 1))
hru_analysis$result_nondominated
plot_pareto(hru_analysis = hru_analysis, aREA_thrs = 0.1, HRU_thrs = 2000)
hru_analysis <- topHRU(hru_table, luse_thrs = c(0, 180, 2), soil_thrs = c(0, 240, 4),
slp_thrs = c(0, 0, 0), thrs_type = c("A"), weight = c(1, 1, 1))
library(topHRU)
hru_table <- extract_HRU("C:/SWAT_POF/Ilm_2/Ilm_2.mdb")
hru_analysis <- topHRU(hru_table, luse_thrs = c(0, 180, 2), soil_thrs = c(0, 240, 4),
slp_thrs = c(0, 0, 0), thrs_type = c("A"), weight = c(1, 1, 1))
plot_pareto(hru_analysis = hru_analysis, aREA_thrs = 0.1, HRU_thrs = 2000)
library(topHRU)
hru_table <- read.table("C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/topHRU/hrus_upamaz.txt")
hru_table <- read.table("C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/topHRU/hrus_upamaz.txt", sep=",", h=T)
library(SWATfarmR)
library(SWATfarmR)
mgt_pth <- "C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/SWATfarmR/mgt_cnop"
txtIO_pth <- "C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/SWATfarmR/TxtInOut"
SWATfarmR_input <- prepare_inputdata(txtIO_pth, mgt_pth, ant_days = 5)
write_mgtfiles(SWATfarmR_input, txtIO_pth)
mgt_pth <- "Y:/Home/mstrauch/SWAT_Ilm/SWATfarmR/Christoph_Nov1/mgt_cnop"
txtIO_pth <- "C:/SWAT_POF/Ilm_2/Scenarios/SWATfarmR2/TxtInOut"
SWATfarmR_input <- prepare_inputdata(txtIO_pth, mgt_pth, ant_days = 5)
write_mgtfiles(SWATfarmR_input, txtIO_pth)
hru_table <- read.table("C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/topHRU/hrus_upamaz.txt", sep=",", h=T)
library(topHRU)
hru_table <- read.table("C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/topHRU/hrus_ex_Ilm.txt", sep=",", h=T)
180/20
180/5
30*20*10
library(topHRU)
hru_table <- read.table("C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/topHRU/hrus_ex_Ilm.txt", sep=",", h=T)
hru_analysis <- topHRU(hru_table, luse_thrs = c(0, 180, 6), soil_thrs = c(0, 240, 12),
slp_thrs = c(0, 200, 20), thrs_type = c("A"), weight = c(1, 1, 1))
plot_pareto(hru_analysis = hru_analysis, aREA_thrs = 0.1, HRU_thrs = 2000)
plot_pareto(hru_analysis = hru_analysis, aREA_thrs = 0.01, HRU_thrs = 2000)
pdf("C:/+STRAUCH/test.pdf", height=7, width=7)
pdf("C:/+STRAUCH+/test.pdf", height=7, width=7)
plot_pareto(hru_analysis = hru_analysis, aREA_thrs = 0.01, HRU_thrs = 2000)
dev.off()
dev.off()
dev.off()
pdf("C:/+STRAUCH+/test.pdf", height=7, width=7)
plot_pareto(hru_analysis = hru_analysis, aREA_thrs = 0.01, HRU_thrs = 2000)
dev.off()
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
dev.off()
cairo_ps("C:/+STRAUCH+/test.pdf", height=7, width=7)
plot_pareto(hru_analysis = hru_analysis, aREA_thrs = 0.01, HRU_thrs = 2000)
dev.off()
library(topHRU)
cairo_ps("C:/+STRAUCH+/test.pdf", height=7, width=7)
plot_pareto(hru_analysis = hru_analysis, aREA_thrs = 0.01, HRU_thrs = 2000)
dev.off()
cairo_ps("C:/+STRAUCH+/test.ps", height=7, width=7)
plot_pareto(hru_analysis = hru_analysis, aREA_thrs = 0.01, HRU_thrs = 2000)
dev.off()
cairo_ps("C:/+STRAUCH+/test.eps", height=7, width=7)
plot_pareto(hru_analysis = hru_analysis, aREA_thrs = 0.01, HRU_thrs = 2000)
dev.off()
hru_table <- extract_HRU("C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/SWAT_R_example_data/Ilm_2.mdb")
library("topHRU", lib.loc="~/R/win-library/3.3")
remove.packages("topHRU", lib="~/R/win-library/3.3")
devtools::install_git("https://github.com/michstrauch/TopHRU", dependencies = TRUE)
devtools::install_git("https://github.com/michstrauch/TopHRU", dependencies = TRUE)
hru_table <- extract_HRU("C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/SWAT_R_example_data/Ilm_2.mdb")
library(topHRU)
hru_table <- extract_HRU("C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/SWAT_R_example_data/Ilm_2.mdb")
View(hru_table)
library("topHRU", lib.loc="~/R/win-library/3.3")
remove.packages("topHRU", lib="~/R/win-library/3.3")
devtools::install_git("https://github.com/michstrauch/TopHRU", dependencies = TRUE)
library(SWATfarmR)
install.packages("C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/SWAT_R_example_data/SWATfarmR_0.2.1.tar.gz", repos = NULL, type = "source")
library(SWATfarmR)
head hru_data
head(hru_data)
library(topHRU)
head(hru_data)
evaluate_hru(hru_table = hru_data)
library(SWATfarmR)
mgt_pth <- "C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/SWATfarmR/mgt_cnop"
txtIO_pth <- "C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/SWATfarmR/TxtInOut"
SWATfarmR_input <- prepare_inputdata(txtIO_pth, mgt_pth, ant_days = 5)
write_mgtfiles(SWATfarmR_input, txtIO_pth)
SWATfarmR_input <- prepare_inputdata(txtIO_pth, mgt_pth, ant_days = 5)
txtIO_pth <- "C:/TxtInOut"
SWATfarmR_input <- prepare_inputdata(txtIO_pth, mgt_pth, ant_days = 5)
SWATfarmR_input <- prepare_inputdata(txtIO_pth, mgt_pth, ant_days = 5)
mgt_pth <- "C:/SWAT_POF/Ilm_3/input/management"
txtIO_pth <- "C:/SWAT_POF/Ilm_3/Scenarios/Default/TxtInOut"
SWATfarmR_input <- prepare_inputdata(txtIO_pth, mgt_pth, ant_days = 5)
library(SWATfarmR)
mgt_pth <- "C:/SWAT_POF/Ilm_3/input/management"
txtIO_pth <- "C:/SWAT_POF/Ilm_3/Scenarios/Default/TxtInOut"
SWATfarmR_input <- prepare_inputdata(txtIO_pth, mgt_pth, ant_days = 5)
install.packages("doSNOW")
install.packages("data.table")
install.packages("doSNOW")
library(SWATfarmR)
mgt_pth <- "C:/SWAT_POF/Ilm_3/input/management"
txtIO_pth <- "C:/SWAT_POF/Ilm_3/Scenarios/Default/TxtInOut"
SWATfarmR_input <- prepare_inputdata(txtIO_pth, mgt_pth, ant_days = 5)
detach("package:SWATfarmR", unload=TRUE)
library(SWATfarmR)
mgt_pth <- "C:/SWAT_POF/Ilm_3/input/management"
txtIO_pth <- "C:/SWAT_POF/Ilm_3/Scenarios/Default/TxtInOut"
SWATfarmR_input <- prepare_inputdata(txtIO_pth, mgt_pth, ant_days = 5)
library(SWATfarmR)
mgt_pth <- "C:/SWAT_POF/Ilm_3/input/management"
txtIO_pth <- "C:/SWAT_POF/Ilm_3/Scenarios/Default/TxtInOut"
mgt_pth <- "C:/SWAT_POF/Ilm_3/input/management/"
txtIO_pth <- "C:/SWAT_POF/Ilm_3/Scenarios/Default/TxtInOut/"
SWATfarmR_input <- prepare_inputdata(txtIO_pth, mgt_pth, ant_days = 5)
mgt_pth <- "C:/SWAT_POF/Ilm_3/input/management/mgt_cnop"
SWATfarmR_input <- prepare_inputdata(txtIO_pth, mgt_pth, ant_days = 5)
write_mgtfiles(SWATfarmR_input, txtIO_pth)
head(hru_demo)
evaluate_hru(hru_table = hru_demo)
library(topHRU)
head(hru_demo)
evaluate_hru(hru_table = hru_demo)
hru_table <- hru_demo
View(hru_table)
hru_analysis <- evaluate_hru(hru_table, luse_thrs = c(0, 180, 6), soil_thrs = c(0, 240, 12),
slp_thrs = c(0, 200, 20), thrs_type = c("A"), weight = c(1, 1, 1))
hru_analysis <- evaluate_hru(hru_table, luse_thrs = c(0, 180, 9), soil_thrs = c(0, 240, 12),
slp_thrs = c(0, 200, 20), thrs_type = c("A"), weight = c(1, 1, 1))
hru_analysis <- evaluate_hru(hru_table, luse_thrs = c(0, 180, 6), soil_thrs = c(0, 240, 12),
slp_thrs = c(0, 0, 0), thrs_type = c("A"), weight = c(1, 1, 1))
hru_analysis <- evaluate_hru(hru_table, luse_thrs = c(0, 180, 6), soil_thrs = c(0, 240, 10),
slp_thrs = c(0, 0, 0), thrs_type = c("A"), weight = c(1, 1, 1))
hru_analysis <- evaluate_hru(hru_table, luse_thrs = c(0, 180, 3), soil_thrs = c(0, 240, 8),
slp_thrs = c(0, 0, 0), thrs_type = c("A"), weight = c(1, 1, 1))
hru_analysis$result_nondominated
plot_pareto(hru_analysis, area_thrs = NULL, hru_thrs = NULL, interactive = T)
## evaluate the different threshold combinations (calculate spatial error)
hru_analysis <- evaluate_hru(hru_table, luse_thrs = c(0, 240, 8), soil_thrs = c(0, 180, 3),
slp_thrs = c(0, 0, 0), thrs_type = c("A"), weight = c(1, 1, 1))
plot_pareto(hru_analysis, area_thrs = NULL, hru_thrs = NULL, interactive = T)
library(topHRU)
hru_table <- hru_demo
library("topHRU", lib.loc="~/R/win-library/3.3")
remove.packages("topHRU", lib="~/R/win-library/3.3")
devtools::install_git("https://github.com/michstrauch/TopHRU", dependencies = TRUE)
devtools::install_git("https://github.com/michstrauch/TopHRU", dependencies = TRUE)
library(topHRU)
hru_table <- hru_demo
library(topHRU)
hru_table <- hru_demo
View(hru_table)
hru_analysis <- evaluate_hru(hru_table, luse_thrs = c(0, 180, 3), soil_thrs = c(0, 240, 6),
slp_thrs = c(0, 0, 0), thrs_type = "A", weight = c(1, 1, 1))
hru_analysis$result_nondominated
plot_pareto(hru_analysis, area_thrs = NULL, hru_thrs = NULL,
interactive = TRUE)
plot_pareto(hru_analysis, area_thrs = 0.005, hru_thrs = 3500,
interactive = TRUE)
install.packages(c("devtools","abind", "emoa", "dplyr", "ggplot2","miniUI","yaml"))
devtools::install_github(c("ropensci/plotly","michstrauch/TopHRU"))
install.packages(c("devtools","abind", "emoa", "dplyr", "ggplot2","miniUI","yaml"))
devtools::install_github(c("ropensci/plotly","michstrauch/TopHRU"))
## load topHRU
library(topHRU)
## extract hrus table from the SWAT mdb (after HRU definition without thresholds)RODBC requires 32bit R version),
## alternatively read table as txt file (exported from SWAT mdb including column names)
hru_table <- extract_hru("C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/SWAT_R_example_data/Ilm_2.mdb")
#hru_table <- read.table("C:/+STRAUCH+/+ORGANISATORISCHES+/MEETINGS/17-1-SWAT-D_Bayreuth/topHRU/hrus_ex_Ilm.txt", sep=",", h=T)
hru_table <- hru_demo
## evaluate the different threshold combinations (calculate spatial error)
hru_analysis <- evaluate_hru(hru_table, luse_thrs = c(0, 240, 8), soil_thrs = c(0, 180, 3),
slp_thrs = c(0, 0, 0), thrs_type = c("A"), weight = c(1, 1, 1))
## view results
hru_analysis$result_nondominated
## plot results
plot_pareto(hru_analysis, area_thrs = NULL, hru_thrs = NULL, interactive = T)
50*109*4
####### Determining DB Index ######
#install.packages("clusterSim")
require(clusterSim)
require(foreign)
# working directory
setwd("C:/+STRAUCH+/+TEMP+/range_50_3_50")
# get all dbfs
filenames<-dir(pattern=".dbf")
# build data structure
perform <- data.frame(matrix(data=NA, nrow=length(filenames), ncol=5))
names(perform) <- c("topX","topY","n_cluster","DBindex","meanDist")
# loop over all files
for (i in 1:length(filenames)) {
# get topX and topY (topology matrix values)
topX <- as.numeric(unlist(strsplit(filenames[i],"_"))[2])
topY <- as.numeric(unlist(strsplit(filenames[i],"_"))[3])
n_cluster <- topX * topY
# calculate DB index
DB_x_x<-read.dbf(filenames[i]) #DB index wird für jede Kombination einzeln berechnet -> unterschiedlice dbf einlesen
DB_x<-DB_x_x[c(3:12)]                                                           #Auswahl der Spalten, welche Codebookinformationen zu den einzelnen Merkmalen enthalten
indexDB<-index.DB(DB_x, DB_x$som_unit, centrotypes="centroids")               #Definition der Cluster-Einheit -> som_unit
# mean distance
meanDist <- mean(DB_x_x$som_distan)
# write into dataframe
perform[i,1] <- topX
perform[i,2] <- topY
perform[i,3] <- n_cluster
perform[i,4] <- indexDB$DB
perform[i,5] <- meanDist
}
perform <- perform[order(perform$n_cluster),]
# plot results
pdf("SOM_analysis.pdf", width=7.5, height=5)
par(mar = c(5, 4, 4, 4) + 0.3)  # Leave space for z axis
plot(perform$n_cluster,perform$DBindex,type="l",ylab="DBindex", xlab="Number of clusters") # first plot
par(new = TRUE)
plot(perform$n_cluster, perform$meanDist, type = "l", col="red",
axes = FALSE, bty = "n", xlab = "", ylab = "")
axis(side=4, at = pretty(range(perform$meanDist)))
mtext("meanDist", side=4, line=3)
legend("top",c("DB index","mean Distance"), lty=c(1,1), col=c("black","red"))
dev.off()
# normalize DBindex and meanDist
perform$DBindex.norm <- perform$DBindex / max(perform$DBindex)
perform$meanDist.norm <- perform$meanDist / max(perform$meanDist)
perform$DB_Dist.sum <- perform$DBindex.norm + perform$meanDist.norm
perform[which.min(perform$DB_Dist.sum),]
setwd("C:/+STRAUCH+/+PAPER_WORK+/Opti-Tool/ToolCombiModels/models/HabStruct")
sink("C:/+STRAUCH+/+PAPER_WORK+/Opti-Tool/ToolCombiModels/models/HabStruct/console.txt", append=FALSE)
lu.map <- read.table("map.asc", h=F, skip=6, sep=" ")
edgecount <- function(x){
x<-as.matrix(x)
x[x==-2] <- NA
r<-nrow(x)
c<-ncol(x)
y <- matrix(ncol=ncol(x), nrow=nrow(x))
z <- y
for (i in 1:(r-1)){
for (j in 1:(c)){
y[i,j]<-(as.numeric((x[i,j]==x[i+1,j])==FALSE))
}}
for (j in 1:(c-1)){
for (i in 1:(r)){
z[i,j]<-(as.numeric((x[i,j]==x[i,j+1])==FALSE))
}}
edges.horizontal <- length(which(y == 1))
edges.vertical <- length(which(z == 1))
edges.total <- edges.horizontal+edges.vertical
}
lu.map.1 <- lu.map
lu.map.1[lu.map.1 >=2 & lu.map.1 <= 5] <- -2 # replace cells with arable land
lu.map.1[lu.map.1 == 8] <- -2 # replace cells with urban area
View(lu.map.1)
edges.1 <- edgecount(lu.map.1)
edges.1[is.na(edges.1)] <- 0
lu.map.0.5 <- lu.map
lu.map.0.5[lu.map.0.5 >=3 & lu.map.0.5 <= 5] <- -2 # replace cells with arable land
lu.map.0.5[lu.map.0.5 <=1] <- -2 # replace cells with arable land
lu.map.0.5[lu.map.0.5 == 8] <- -2 # replace cells with urban area
lu.map.0.5[lu.map.0.5 == 6] <- 1 # replace cells with pasture
lu.map.0.5[lu.map.0.5 == 7] <- 1 # replace cells with forest
View(lu.map.0.5)
View(lu.map)
edges.0.5 <- edgecount(lu.map.0.5)
edges.0.5[is.na(edges.0.5)] <- 0
edges.0.5.weighted <- edges.0.5 *1/2
here()
library(here)
sink(here('models', 'WYLD', 'console.txt'), append=FALSE)
sink()
setwd("/Users/victorsteffens/CoMOLA repo/COMOla/models/HabStruct")
sink("/Users/victorsteffens/CoMOLA repo/COMOla/models/HabStruct/console.txt", append=FALSE)
library(here)
library(here)
library(here)
sink(here('models', 'Habstruct', 'console.txt'), append=FALSE)
# read in ascii files
lu.map <- read.table(here('models', 'Habstruct','map.asc'), h=F, skip=6, sep=" ")
#################### Function for counting habitat edges ####################
edgecount <- function(x){
x<-as.matrix(x)
x[x==-2] <- NA
r<-nrow(x)
c<-ncol(x)
y <- matrix(ncol=ncol(x), nrow=nrow(x))
z <- y
for (i in 1:(r-1)){
for (j in 1:(c)){
y[i,j]<-(as.numeric((x[i,j]==x[i+1,j])==FALSE))
}}
for (j in 1:(c-1)){
for (i in 1:(r)){
z[i,j]<-(as.numeric((x[i,j]==x[i,j+1])==FALSE))
}}
edges.horizontal <- length(which(y == 1))
edges.vertical <- length(which(z == 1))
edges.total <- edges.horizontal+edges.vertical
}
# Recode land use map so that edges between not considered land use classes are ignored
lu.map.1 <- lu.map
lu.map.1[lu.map.1 >=2 & lu.map.1 <= 5] <- -2 # replace cells with arable land
lu.map.1[lu.map.1 == 8] <- -2 # replace cells with urban area
edges.1 <- edgecount(lu.map.1)
edges.1[is.na(edges.1)] <- 0
# Recode land use map so that edges between not considered land use classes are ignored
lu.map.0.5 <- lu.map
lu.map.0.5[lu.map.0.5 >=3 & lu.map.0.5 <= 5] <- -2 # replace cells with arable land
lu.map.0.5[lu.map.0.5 <=1] <- -2 # replace cells with arable land
lu.map.0.5[lu.map.0.5 == 8] <- -2 # replace cells with urban area
lu.map.0.5[lu.map.0.5 == 6] <- 1 # replace cells with pasture
lu.map.0.5[lu.map.0.5 == 7] <- 1 # replace cells with forest
edges.0.5 <- edgecount(lu.map.0.5)
edges.0.5[is.na(edges.0.5)] <- 0
edges.0.5.weighted <- edges.0.5 *1/2
# Recode land use map so that edges between not considered land use classes are ignored
lu.map.0.33 <- lu.map
lu.map.0.33[lu.map.0.33 == 4] <- -2 # replace cells with arable land
lu.map.0.33[lu.map.0.33 == 5] <- -2 # replace cells with arable land
lu.map.0.33[lu.map.0.33 <=2] <- -2 # replace cells with arable land
lu.map.0.33[lu.map.0.33 == 8] <- -2 # replace cells with urban area
lu.map.0.33[lu.map.0.33 == 6] <- 1 # replace cells with pasture
lu.map.0.33[lu.map.0.33 == 7] <- 1 # replace cells with forest
edges.0.33 <- edgecount(lu.map.0.33)
edges.0.33[is.na(edges.0.33)] <- 0
edges.0.33.weighted <- edges.0.33 *1/3
# Recode land use map so that edges between not considered land use classes are ignored
lu.map.0.25 <- lu.map
lu.map.0.25[lu.map.0.25 == 5] <- -2 # replace cells with arable land
lu.map.0.25[lu.map.0.25 <= 3] <- -2 # replace cells with arable land
lu.map.0.25[lu.map.0.25 == 8] <- -2 # replace cells with urban area
lu.map.0.25[lu.map.0.25 == 6] <- 1 # replace cells with pasture
lu.map.0.25[lu.map.0.25 == 7] <- 1 # replace cells with forest
edges.0.25 <- edgecount(lu.map.0.25)
edges.0.25[is.na(edges.0.25)] <- 0
edges.0.25.weighted <- edges.0.25 *1/4
# Recode land use map so that edges between not considered land use classes are ignored
lu.map.0.2 <- lu.map
lu.map.0.2[lu.map.0.2 <= 4] <- -2 # replace cells with arable land
lu.map.0.2[lu.map.0.2 == 8] <- -2 # replace cells with urban area
lu.map.0.2[lu.map.0.2 == 6] <- 1 # replace cells with pasture
lu.map.0.2[lu.map.0.2 == 7] <- 1 # replace cells with forest
edges.0.2 <- edgecount(lu.map.0.2)
edges.0.2[is.na(edges.0.2)] <- 0
edges.0.2.weighted <- edges.0.2 *1/5
edges <- edges.1 + edges.0.5.weighted + edges.0.33.weighted + edges.0.25.weighted + edges.0.2.weighted
# write model output
write.table(edges, here('models', 'Habstruct','HabStruct_output.csv'),append=FALSE ,sep =";",col.names=FALSE ,row.names=FALSE)
sink()
library(mco)
library(plyr)
library(raster)
library(ggplot2)
library(viridis)
## Define paths
# to optimization results
opt_path <- "C:/+PAPER_WORK+/Opti-Tool/CoMOLA_GitHub/output"
# to some post-processing folder
post_path <- "C:/+PAPER_WORK+/Opti-Tool/CoMOLA_GitHub/output_analysis"
# name of output metrics file
file_out <- "metrics.txt"
### Extract results if any results are available and feasible
setwd(opt_path)
library(here)
here()
library(mco)
library(plyr)
library(raster)
library(ggplot2)
library(viridis)
library(here)
here()
